import { ComboService } from 'src/app/services/combo.service';
import { Component, OnInit, TemplateRef, ViewChild, ElementRef, ViewChildren, QueryList, ChangeDetectorRef, NgZone, Renderer2 } from '@angular/core';
import { Combo } from '../../model/combo.model';

interface ComboWithState extends Combo {
  state: 'active' | 'inactive';
}

@Component({
  selector: 'app-add-new-event',
  templateUrl: './add-new-event.component.html',
  styleUrls: ['./add-new-event.component.css']

})
export class AddNewEventComponent implements OnInit {

  combos: [];
  combosRegulares: ComboWithState[] = [];
  combosConProveedores: ComboWithState[] = [];

  isMaxCombosRegularesReached = false;
  isMaxCombosProveedoresReached = false;
  readonly MAX_COMBOS = 10;

  get showNoCombos(): boolean {
    return this.combosConProveedores.length === 0 && this.combosRegulares.length === 0;
  }

  @ViewChildren('comboItem') comboItems!: QueryList<ElementRef>;
  @ViewChildren('comboItemProveedor') comboItemsProveedores: QueryList<ElementRef>;

constructor(
  private sanitizer: DomSanitizer,
  private userAuthService: UserAuthService, private router: Router, private comboService: ComboService,
  private modalService: NgbModal, private cdr: ChangeDetectorRef, private ngZone: NgZone, private renderer: Renderer2) { }


  ngOnInit(): void {
  

    this.combosRegulares = this.comboService.getCombos().map(combo => ({ ...combo, state: 'active' as const }));
    this.combosConProveedores = this.comboService.getCombos(true).map(combo => ({ ...combo, state: 'active' as const }));
    this.updateMaxCombosReached();
    this.updateShowNoCombos();
  

  }

  isMaxCombosReached = false;


  agregarCombo(esComboConProveedor: boolean = false) {
    const listaObjetivo = esComboConProveedor ? this.combosConProveedores : this.combosRegulares;
    const isMaxReached = esComboConProveedor ? this.isMaxCombosProveedoresReached : this.isMaxCombosRegularesReached;
  
    if (isMaxReached) {
      console.warn(`No se pueden agregar más combos ${esComboConProveedor ? 'con proveedores' : 'regulares'}. Límite alcanzado.`);
      return;
    }
  
    const nuevoCombo: Omit<ComboWithState, 'id'> = {
      name: `Combo ${listaObjetivo.length + 1}${esComboConProveedor ? ' (Proveedor)' : ''}`,
      descripcion: 'Descripción básica',
      imagen: '',
      precio: 0,
      state: 'active'
    };
  
    if (esComboConProveedor) {
      (nuevoCombo as any).proveedor = 'Nombre del Proveedor'; // Asegúrate de que tu modelo Combo incluya 'proveedor'
    }
  
    this.ngZone.run(() => {
      const comboAgregado = this.comboService.addCombo(nuevoCombo, esComboConProveedor);
      listaObjetivo.push({ ...comboAgregado, state: 'active' as const });
  
      this.updateMaxCombosReached();
    
  
      requestAnimationFrame(() => {
        this.cdr.detectChanges();
  
        const comboItems = esComboConProveedor ? this.comboItemsProveedores : this.comboItems;
        if (comboItems && comboItems.last) {
          const nuevoElemento = comboItems.last.nativeElement;
  
          this.renderer.setStyle(nuevoElemento, 'opacity', '0');
          this.renderer.setStyle(nuevoElemento, 'transform', 'scale(0.8) translateY(50px)');
  
          gsap.to(nuevoElemento, {
            opacity: 1,
            scale: 1,
            y: 0,
            duration: 0.6,
            ease: "back.out(1.7)",
            onComplete: () => {
              this.ngZone.run(() => {
                this.cdr.detectChanges();
              });
            }
          });
        }
      });
    });
  }
  
  
  
  
  eliminarCombo(combo: ComboWithState, esComboConProveedor: boolean = false) {
    const listaObjetivo = esComboConProveedor ? this.combosConProveedores : this.combosRegulares;
    const index = listaObjetivo.findIndex(c => c.id === combo.id);
    if (index !== -1) {
      const comboItems = esComboConProveedor ? this.comboItemsProveedores : this.comboItems;
      const comboElements = comboItems.toArray();
      const comboElement = comboElements[index].nativeElement;
  
      // Capturamos las posiciones iniciales de todos los elementos
      const initialPositions = comboElements.map(el => {
        const rect = el.nativeElement.getBoundingClientRect();
        return { left: rect.left, top: rect.top };
      });
  
      // Animación de salida del combo a eliminar
      gsap.to(comboElement, {
        opacity: 0,
        scale: 0.8,
        duration: 0.2,
        onComplete: () => {
          // Eliminamos el combo usando el servicio
          this.comboService.deleteCombo(combo.id, esComboConProveedor);
  
          // Actualizamos la lista de combos
          if (esComboConProveedor) {
            this.combosConProveedores = this.comboService.getCombos(true).map(combo => ({ ...combo, state: 'active' as const }));
            this.isMaxCombosProveedoresReached = this.combosConProveedores.length >= 10;
          } else {
            this.combosRegulares = this.comboService.getCombos().map(combo => ({ ...combo, state: 'active' as const }));
            this.isMaxCombosRegularesReached = this.combosRegulares.length >= 10;
          }
  
          // Forzamos la detección de cambios para actualizar el DOM
          this.cdr.detectChanges();
  
          // Capturamos las nuevas posiciones después de la eliminación
          const finalPositions = comboItems.toArray().map(el => {
            const rect = el.nativeElement.getBoundingClientRect();
            return { left: rect.left, top: rect.top };
          });
  
          // Calculamos y aplicamos los desplazamientos
          this.ngZone.runOutsideAngular(() => {
            gsap.fromTo(
              comboElements.filter((_, i) => i !== index).map(item => item.nativeElement),
              {
                x: (i) => initialPositions[i < index ? i : i + 1].left - finalPositions[i].left,
                y: (i) => initialPositions[i < index ? i : i + 1].top - finalPositions[i].top
              },
              {
                x: 0,
                y: 0,
                duration: 0.3,
                ease: "power2.out",
                stagger: 0.05,
                onComplete: () => {
                  this.ngZone.run(() => {
                    this.cdr.detectChanges();
                  });
                }
              }
            );
          });
        }
      });
    }
  }
  
  
  modificarCombo(combo: ComboWithState, esComboConProveedor: boolean = false) {
    const modalRef = this.modalService.open(EditComboModalComponent, { windowClass: 'modal-custom-bg' });
    modalRef.componentInstance.comboEditado = { ...combo };
    modalRef.componentInstance.esComboConProveedor = esComboConProveedor;
  
    modalRef.result.then((result) => {
      if (result) {
        this.comboService.updateCombo(result, esComboConProveedor);
        
        if (esComboConProveedor) {
          this.combosConProveedores = this.comboService.getCombos(true).map(combo => ({ ...combo, state: 'active' as const }));
        } else {
          this.combosRegulares = this.comboService.getCombos().map(combo => ({ ...combo, state: 'active' as const }));
        }
  
        // Actualizar el combo específico en la lista local
        const listaObjetivo = esComboConProveedor ? this.combosConProveedores : this.combosRegulares;
        const index = listaObjetivo.findIndex(c => c.id === result.id);
        if (index !== -1) {
          listaObjetivo[index] = { ...result, state: 'active' as const };
        }
  
        // Forzar la detección de cambios
        this.cdr.detectChanges();
      }
    }).catch((reason) => {
      // Modal cerrado sin guardar
      console.log('Modal cerrado sin guardar', reason);
    });
  }
  
  updateShowNoCombos() {
    this.cdr.detectChanges();
  }
  
  
    trackByCombo(index: number, combo: any): number {
      return combo.id;
    }
  

}

